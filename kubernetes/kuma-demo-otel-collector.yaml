# This manifest file is meant as an example of how to deploy otel-agent as daemonset and otel-collector as a standalone service.
# Using this example should correctly identifies hostnames for individual k8s nodes. 
# This is meant as an example only and may differ depending on deployment scenario and specifics of the environment the collector is used.
---
# The k8s_tagger processor may require additional
# RBAC Config. More on this here:
# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/12dbcfc3faf80ec532d832fc7e6650222be33ff9/processor/k8sprocessor/doc.go#L26-L28
# Give admin rights to the default account
# so that k8s_tagger can fetch info
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fabric8-rbac
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-conf
  labels:
    app: opentelemetry
    component: otel-collector-conf
data:
  otel-collector-config: |
    receivers:
      hostmetrics:
        collection_interval: 10s
        scrapers:
          load:
      otlp:
        protocols:
          grpc:
          http:
      jaeger:
        protocols:
          grpc:
          thrift_compact:
          thrift_http:
      zipkin:
    processors:
      # memory_limiter:
      #   # Same as --mem-ballast-size-mib CLI argument
      #   ballast_size_mib: 165
      #   # 80% of maximum memory up to 2G
      #   limit_mib: 400
      #   # 25% of limit up to 2G
      #   spike_limit_mib: 100
      #   check_interval: 5s
      resourcedetection:
        detectors: [env]
        timeout: 5s
        override: false
      batch:
        timeout: 10s
      k8s_tagger:
    extensions:
      health_check: {}
      zpages: {}
    exporters:
      datadog:
        api:
          key: <YOUR_API_KEY>
      logging:
        logLevel: debug
    service:
      extensions: [health_check, zpages]
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [resourcedetection, k8s_tagger, batch]
          exporters: [datadog, logging]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  ports:
  - name: otlp # Default endpoint for OpenTelemetry receiver.
    port: 55680
    protocol: TCP
    targetPort: 55680
  - name: otlphhtp # Default endpoint for OpenTelemetry receiver http.
    port: 55681
    protocol: TCP
    targetPort: 55681    
  - name: metrics # Default endpoint for querying metrics.
    port: 8888
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  selector:
   component: otel-collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  labels:
    app: opentelemetry
    component: otel-collector
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  replicas: 1
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-collector
    spec:
      # nodeSelector:
      #   kubernetes.io/os: linux
      # serviceAccountName: datadog-agent-cluster-agent
      containers:
      - command:
          - "/otelcontribcol"
          - "--mem-ballast-size-mib=165"
          - "--config=/conf/otel-collector-config.yaml"
          - "--log-level=debug"
        image: otel/opentelemetry-collector-contrib:latest
        imagePullPolicy: IfNotPresent
        name: otel-collector
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 400Mi
        env:
           # Get pod ip so that k8s_tagger can tag resources
          # - name: DD_API_KEY
          #   valueFrom:
          #     secretKeyRef:
          #       name: datadog-secret
          #       key: api-key
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
            # This is picked up by the resource detector
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: "k8s.pod.ip=$(POD_IP)"
          # - name: HTTP_PROXY
          #   value: "http://squidnat-av.marketintelligence.spglobal.com:3128"
          # - name: HTTPS_PROXY
          #   value: "http://squidnat-av.marketintelligence.spglobal.com:3128"
          # - name: NO_PROXY
          #   value: "169.254.169.254,s3.amazonaws.com,kube-state-metrics.kube-system,10.0.0.0/8,172.20.0.1,100.64.0.0/16"
        ports:
        - containerPort: 55679 # Default endpoint for ZPages.
        - containerPort: 55680 # Default endpoint for OpenTelemetry receiver.
        - containerPort: 55681 # Default endpoint for OpenTelemetry receiver http.
        - containerPort: 8888  # Default endpoint for querying metrics.
        - containerPort: 9411 # Default endpoint for Zipkin receiver.
        volumeMounts:
        - name: otel-collector-config-vol
          mountPath: /conf
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: otel-collector-conf
            items:
              - key: otel-collector-config
                path: otel-collector-config.yaml
          name: otel-collector-config-vol